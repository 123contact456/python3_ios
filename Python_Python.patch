diff -Naur tmp/Python-3.7.1/Python/ceval.c Python-3.7.1/Python/ceval.c
--- tmp/Python-3.7.1/Python/ceval.c	2018-10-20 08:04:19.000000000 +0200
+++ Python-3.7.1/Python/ceval.c	2019-02-07 17:17:55.000000000 +0100
@@ -618,6 +618,10 @@
    can be disabled on gcc by using the -fno-gcse flag (or possibly
    -fno-crossjumping).
 */
+    
+    // iOS addition: computed gotos are a static variable (array of goto destinations)
+    // This can't work with iOS model, based on dynamic libraries. We've
+    // disabled the acceleration in pyconfig.h
 
 #ifdef DYNAMIC_EXECUTION_PROFILE
 #undef USE_COMPUTED_GOTOS
@@ -1060,7 +1064,6 @@
             }
         }
 #endif
-
         switch (opcode) {
 
         /* BEWARE!
@@ -2127,7 +2130,6 @@
             }
             else {
                 /* Slow-path if globals or builtins is not a dict */
-
                 /* namespace 1: globals */
                 v = PyObject_GetItem(f->f_globals, name);
                 if (v == NULL) {
diff -Naur tmp/Python-3.7.1/Python/dynload_shlib.c Python-3.7.1/Python/dynload_shlib.c
--- tmp/Python-3.7.1/Python/dynload_shlib.c	2018-10-20 08:04:19.000000000 +0200
+++ Python-3.7.1/Python/dynload_shlib.c	2019-01-02 22:28:38.000000000 +0100
@@ -64,8 +64,14 @@
     int dlopenflags=0;
 
     if (strchr(pathname, '/') == NULL) {
+#ifndef TARGET_OS_IPHONE
         /* Prefix bare filename with "./" */
         PyOS_snprintf(pathbuf, sizeof(pathbuf), "./%-.255s", pathname);
+#else
+        /* Prefix bare filenames with "$APPDIR/Frameworks/" */
+        /* (the only place where we can put dynamic libraries on iOS */
+        PyOS_snprintf(pathbuf, sizeof(pathbuf), "%s/Frameworks/%s", getenv("APPDIR"), pathname);
+#endif
         pathname = pathbuf;
     }
 
diff -Naur tmp/Python-3.7.1/Python/fileutils.c Python-3.7.1/Python/fileutils.c
--- tmp/Python-3.7.1/Python/fileutils.c	2018-10-20 08:04:19.000000000 +0200
+++ Python-3.7.1/Python/fileutils.c	2019-02-17 20:28:32.000000000 +0100
@@ -1375,7 +1375,7 @@
         count = PY_SSIZE_T_MAX;
     }
 #endif
-
+    
     _Py_BEGIN_SUPPRESS_IPH
     do {
         Py_BEGIN_ALLOW_THREADS
diff -Naur tmp/Python-3.7.1/Python/getplatform.c Python-3.7.1/Python/getplatform.c
--- tmp/Python-3.7.1/Python/getplatform.c	2018-10-20 08:04:19.000000000 +0200
+++ Python-3.7.1/Python/getplatform.c	2018-12-20 23:39:32.000000000 +0100
@@ -2,7 +2,7 @@
 #include "Python.h"
 
 #ifndef PLATFORM
-#define PLATFORM "unknown"
+#define PLATFORM "darwin"
 #endif
 
 const char *
diff -Naur tmp/Python-3.7.1/Python/import.c Python-3.7.1/Python/import.c
--- tmp/Python-3.7.1/Python/import.c	2018-10-20 08:04:19.000000000 +0200
+++ Python-3.7.1/Python/import.c	2019-02-22 20:36:44.000000000 +0100
@@ -413,7 +413,7 @@
        destruction order.  Sigh. */
 
     /* XXX Perhaps these precautions are obsolete. Who knows? */
-
+    
     if (Py_VerboseFlag)
         PySys_WriteStderr("# clear builtins._\n");
     if (PyDict_SetItemString(interp->builtins, "_", Py_None) < 0) {
diff -Naur tmp/Python-3.7.1/Python/pylifecycle.c Python-3.7.1/Python/pylifecycle.c
--- tmp/Python-3.7.1/Python/pylifecycle.c	2018-10-20 08:04:19.000000000 +0200
+++ Python-3.7.1/Python/pylifecycle.c	2019-02-21 21:51:49.000000000 +0100
@@ -2097,7 +2097,7 @@
 static void _Py_NO_RETURN
 fatal_error(const char *prefix, const char *msg, int status)
 {
-    const int fd = fileno(stderr);
+    const int fd = (thread_stderr != NULL) ? fileno(thread_stderr) : fileno(stderr);
     static int reentrant = 0;
 
     if (reentrant) {
@@ -2107,19 +2107,19 @@
     }
     reentrant = 1;
 
-    fprintf(stderr, "Fatal Python error: ");
+    fprintf(thread_stderr, "Fatal Python error: ");
     if (prefix) {
-        fputs(prefix, stderr);
-        fputs(": ", stderr);
+        fputs(prefix, thread_stderr);
+        fputs(": ", thread_stderr);
     }
     if (msg) {
-        fputs(msg, stderr);
+        fputs(msg, thread_stderr);
     }
     else {
-        fprintf(stderr, "<message not set>");
+        fprintf(thread_stderr, "<message not set>");
     }
-    fputs("\n", stderr);
-    fflush(stderr); /* it helps in Windows debug build */
+    fputs("\n", thread_stderr);
+    fflush(thread_stderr); /* it helps in Windows debug build */
 
     /* Print the exception (if an exception is set) with its traceback,
      * or display the current Python stack. */
